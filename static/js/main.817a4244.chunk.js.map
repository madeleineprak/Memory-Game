{"version":3,"sources":["components/Card/index.js","components/Hero/index.js","components/Input/index.js","serviceWorker.js","index.js","App.js"],"names":["Card","props","className","src","image","alt","onClick","clickImage","id","Hero","Input","value","search","name","onChange","handleInputChange","type","placeholder","handleUserInput","score","highScore","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","global","fetch","state","images","clickedImages","numImages","searchUnsplash","term","Unsplash","require","default","accessKey","photos","orientation","toJson","res","setState","results","event","target","preventDefault","shuffleImages","array","i","length","j","Math","floor","random","includes","bulmaToast","message","position","newClickedImages","push","alert","this","max","map","img","urls","regular","key","Component"],"mappings":"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","file":"static/js/main.817a4244.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../Card/style.css\";\r\nfunction Card(props) {\r\n    return(\r\n        <div className=\"card\">\r\n            <div className=\"card-image\">\r\n                {/* <figure class=\"image is-25x25\"> */}\r\n                    <img src={props.image} alt=\"unsplash\" onClick={() => props.clickImage(props.id)}></img>\r\n                {/* </figure> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nfunction Hero() {\r\n    return (\r\n        <section className=\"hero is-primary is-bold\">\r\n          <div className=\"hero-body\">\r\n            <div className=\"container\">\r\n              <h1 className=\"title is-1\">Memory Game</h1>\r\n              <h2 className=\"subtitle\">Click on an image to earn points, but don't click on any more than once.</h2>\r\n            </div>\r\n          </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Hero;","import React from \"react\";\r\n\r\nfunction Input(props) {\r\n    return (\r\n        <div className=\"field has-addons\">\r\n          <div className=\"control text-input\">\r\n            <input value={props.search} name=\"search\" className=\"input is-primary is-medium\" onChange={props.handleInputChange} type=\"text\" placeholder=\"Choose a theme\"></input>\r\n          </div>\r\n          <div className=\"control input-button\">\r\n            <button className=\"button is-primary is-medium\" onClick={props.handleUserInput} >Go</button>\r\n          </div>\r\n          <div className=\"score-display\">\r\n            <strong>\r\n              SCORE: {props.score} | HIGH SCORE: {props.highScore}\r\n            </strong>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport './App.css';\nimport Card from \"./components/Card/index\";\nimport Hero from \"./components/Hero/index\";\nimport Input from \"./components/Input/index\";\nimport fetch from 'node-fetch';\nimport { toJson } from 'unsplash-js';\nimport * as bulmaToast from \"bulma-toast\";\nglobal.fetch = fetch;\n\nclass App extends Component {\n  state = {\n    search: \"\",\n    images: [],\n    score: 0,\n    highScore: 0,\n    clickedImages: [],\n    numImages: 12\n  }\n\n  componentDidMount() {\n    this.searchUnsplash(\"minimalist\");\n  }\n\n  searchUnsplash = term => {\n    const Unsplash = require('unsplash-js').default;\n    const unsplash = new Unsplash({ accessKey: \"b76db29ac02281a2820fd80b71b7dbee872602dc5cbf4feac6296ad24dd8608e\" });\n    unsplash.search.photos(term, 1, this.state.numImages, { orientation: \"squarish\" })\n      .then(toJson)\n      .then(res => {\n        this.setState({ images: res.results })\n      });\n  }\n\n  handleInputChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleUserInput = event => {\n    event.preventDefault();\n    this.searchUnsplash(this.state.search);\n    this.setState({ clickedImages: [], score: 0 })\n  }\n\n  shuffleImages = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    this.setState({ images: array });\n  }\n\n  clickImage = id => {\n    // If user wrong\n    if (this.state.clickedImages.includes(id)) {\n      bulmaToast.toast({ message: \"Incorrect!\", type: \"is-danger\", position: \"bottom-center\" });\n      this.setState({ clickedImages: [], score: 0 })\n      this.shuffleImages(this.state.images);\n      // If user correct\n    } else {\n      bulmaToast.toast({ message: \"Correct!\", type: \"is-success\", position: \"bottom-center\" });\n      let newClickedImages = this.state.clickedImages;\n      newClickedImages.push(id);\n      this.setState({ clickedImages: newClickedImages })\n      this.setState((state) => {\n        return { score: state.score + 1 };\n      }, \n      // Callback for if high score\n      () => {\n        if (this.state.score > this.state.highScore) {\n          this.setState({ highScore: this.state.score });\n        }\n      }\n      );\n      if (this.state.clickedImages.length === this.state.numImages) {\n        alert(\"You win\");\n        this.setState({ clickedImages: [], score: 0 })\n      }\n      this.shuffleImages(this.state.images);\n\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Hero/>\n        <progress className=\"progress is-primary\" value={this.state.clickedImages.length} max={this.state.numImages}></progress>\n        <Input search={this.state.search} handleInputChange={this.handleInputChange} handleUserInput={this.handleUserInput} score={this.state.score} highScore={this.state.highScore}/>\n        <div className=\"card-container\">\n          {!this.state.images[0] ? <h1 className=\"subtitle\">Hmm.. Try a different term</h1> : this.state.images.map(img => (<Card image={img.urls.regular} key={img.id} id={img.id} clickImage={this.clickImage} />))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}